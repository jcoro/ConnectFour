#BlueJ class context
comment0.params=game\ iAmRed
comment0.target=MyAgent2(Connect4Game,\ boolean)
comment0.text=\r\n\ Constructs\ a\ new\ agent,\ giving\ it\ the\ game\ and\ telling\ it\ whether\ it\ is\ Red\ or\ Yellow.\r\n\ \r\n\ @param\ game\ The\ game\ the\ agent\ will\ be\ playing.\r\n\ @param\ iAmRed\ True\ if\ the\ agent\ is\ Red,\ False\ if\ the\ agent\ is\ Yellow.\r\n
comment1.params=
comment1.target=void\ move()
comment1.text=\r\n\ The\ move\ method\ is\ run\ every\ time\ it\ is\ this\ agent's\ turn\ in\ the\ game.\ You\ may\ assume\ that\r\n\ when\ move()\ is\ called,\ the\ game\ has\ at\ least\ one\ open\ slot\ for\ a\ token,\ and\ the\ game\ has\ not\r\n\ already\ been\ won.\r\n\ \r\n\ By\ the\ end\ of\ the\ move\ method,\ the\ agent\ should\ have\ placed\ one\ token\ into\ the\ game\ at\ some\r\n\ point.\r\n\ \r\n\ After\ the\ move()\ method\ is\ called,\ the\ game\ engine\ will\ check\ to\ make\ sure\ the\ move\ was\r\n\ valid.\ A\ move\ might\ be\ invalid\ if\:\r\n\ -\ No\ token\ was\ place\ into\ the\ game.\r\n\ -\ More\ than\ one\ token\ was\ placed\ into\ the\ game.\r\n\ -\ A\ previous\ token\ was\ removed\ from\ the\ game.\r\n\ -\ The\ color\ of\ a\ previous\ token\ was\ changed.\r\n\ -\ There\ are\ empty\ spaces\ below\ where\ the\ token\ was\ placed.\r\n\ \r\n\ If\ an\ invalid\ move\ is\ made,\ the\ game\ engine\ will\ announce\ it\ and\ the\ game\ will\ be\ ended.\r\n\ \r\n
comment10.params=colIndex\ slotIndex\ thisMove
comment10.target=int\ theyCanWin(int,\ int,\ boolean)
comment10.text=\r\n\ Returns\ the\ column\ that\ would\ allow\ the\ opponent\ to\ win.\r\n\ \r\n\ You\ might\ want\ your\ agent\ to\ check\ to\ see\ if\ the\ opponent\ would\ have\ any\ winning\ moves\r\n\ available\ so\ your\ agent\ can\ block\ them.\ Implement\ this\ method\ to\ return\ what\ column\ should\r\n\ be\ blocked\ to\ prevent\ the\ opponent\ from\ winning.\r\n\r\n\ @return\ the\ column\ that\ would\ allow\ the\ opponent\ to\ win.\r\n
comment11.params=color\ colIndex\ slotIndex\ thisMove
comment11.target=int\ winningMoveAvailable(boolean,\ int,\ int,\ boolean)
comment11.text=\r\n\ Returns\ the\ Column\ Index\ that\ would\ allow\ a\ player\ to\ win\ on\ this\ move\ or\ the\ next\ move.\r\n\ place\ the\ token\ here\ unless\ the\ move\ would\ immediately\ would\ allow\ the\ opponent\ to\ win.\r\n\ @param\ color\ boolean\ to\ check\ color.\r\n\ @param\ colIndex\ the\ column\ index\ to\ start\ counting\ from.\r\n\ @param\ slotIndex\ the\ slot\ index,\ 0\ for\ lowest\ and\ 1\ for\ the\ slot\ above\ it.\r\n\ @param\ thisMove\ a\ boolean\ to\ indicate\ whether\ to\ test\ the\ current\ move\ or\ the\ next\ move.\r\n\ @return\ returns\ the\ column\ index\ offering\ a\ win\ on\ this\ or\ the\ subsequent\ move,\r\n\ -1\ if\ no\ such\ move\ exists.\r\n
comment12.params=columnIndex\ color\ testRow
comment12.target=java.lang.Integer[]\ consecutiveTokens(int,\ boolean,\ int)
comment12.text=\r\n\ Returns\ an\ array\ of\ three\ integers\ indicating,\ if\ a\ token\ is\ placed\ in\ a\ slot\:\r\n\ 1.\ How\ long\ the\ consecutive\ token\ streak\ would\ be\r\n\ 2.\ How\ many\ consecutive\ token\ streaks\ with\ this\ length\ exist\ for\ the\ particular\ slot\r\n\ 3.\ How\ many\ open\ slots\ adjacent\ to\ the\ consecutive\ token\ streak\ would\ be\ fillable.\r\n\ @param\ columnIndex\ The\ column\ index\ that\ is\ being\ tested.\r\n\ @param\ color\ The\ color\ being\ tested.\ Red\ \=\=\ true,\ Yellow\ \=\=\ false.\r\n\ @param\ testRow\ the\ row\ being\ tested,\ which\ is\ passed\ 0\ for\ lowest\ and\ 1\ for\ the\ slot\ above\ it.\r\n\ @return\ an\ array\ of\ three\ integers,\ the\ first\ is\ the\ length\ of\ consecutive\ tokens,\ the\ second\ is\r\n\ the\ number\ of\ consecutive\ token\ streaks\ of\ this\ length,\ and\ the\ third\ is\ the\ number\ of\ adjacent\r\n\ slots\ which\ are\ fillable\ (0,\ 1,\ or\ 2)\r\n
comment13.params=columnIndex\ color\ direction\ testRow
comment13.target=java.lang.Integer[]\ consecutiveTokensLength(int,\ boolean,\ int,\ int)
comment13.text=\r\n\ Returns\ an\ array\ of\ two\ integers\ indicating,\ if\ a\ token\ is\ placed\ in\ a\ slot\:\r\n\ 1.\ How\ long\ the\ consecutive\ token\ streak\ would\ be\r\n\ 2.\ How\ many\ open\ slots\ adjacent\ to\ the\ consecutive\ token\ streak\ would\ be\ fillable.\r\n\ @param\ columnIndex\ The\ column\ index\ that\ is\ being\ tested.\r\n\ @param\ color\ The\ color\ being\ tested.\ Red\ \=\=\ true,\ Yellow\ \=\=\ false.\r\n\ @param\ direction\ There\ are\ four\ possible\ directions\ in\ which\ consecutive\ tokens\ can\ be\ aligned.\r\n\ @param\ testRow\ the\ row\ being\ tested,\ which\ is\ passed\ 0\ for\ lowest\ and\ 1\ for\ the\ slot\ above\ it.\r\n\ @return\ an\ array\ of\ two\ integers,\ the\ first\ is\ the\ length\ of\ consecutive\ tokens,\ the\ second\ is\r\n\ the\ number\ of\ adjacent\ slots\ which\ are\ fillable\ (0,\ 1,\ or\ 2);\r\n
comment14.params=columnIndex\ x\ y\ testRow
comment14.target=boolean\ outOfBounds(int,\ int,\ int,\ int)
comment14.text=\r\n\ Checks\ to\ see\ if\ a\ slot\ is\ outside\ of\ the\ board\ when\ testing\ for\ consecutive\ tokens\r\n\ CurrentY\ gets\ the\ lowest\ empty\ index\ in\ the\ column\ being\ tested\ and\ subtracts\ 0\ or\ 1\r\n\ (1\ moves\ up\ a\ row)\ depending\ upon\ whether\ we're\ looking\ at\ this\ move\ or\ the\ next.\r\n\ The\ first\ tests\ if\ x\ is\ greater\ than\ the\ number\ of\ columns\ on\ the\ board\r\n\ The\ second\ tests\ if\ the\ row\ below\ the\ row\ being\ looked\ at\ (current\ Y)\ exists\r\n\ The\ third\ tests\ if\ there's\ a\ column\ to\ the\ left\ of\ the\ columnIndex\r\n\ The\ fourth\ tests\ if\ the\ row\ above\ the\ row\ being\ looked\ at\ (current\ Y)\ exists\r\n\ The\ second\ tests\ if\r\n\ @param\ columnIndex\ The\ column\ relative\ to\ which\ we\ test\ if\ adjacent\ columns\ exist.\r\n\ @param\ x\ the\ horizontal\ distance\ to\ increment.\r\n\ @param\ y\ the\ vertical\ distance\ to\ increment.\r\n\ @param\ testRow\ the\ row\ being\ tested,\ which\ is\ passed\ 0\ for\ lowest\ and\ 1\ for\ the\ slot\ above\ it.\r\n\ @return\ a\ boolean\ indicating\ if\ the\ position\ on\ the\ board\ is\ invalid\r\n
comment15.params=columnIndex\ x\ y\ testRow
comment15.target=boolean\ getIsFilled(int,\ int,\ int,\ int)
comment15.text=\r\n\ Returns\ a\ boolean\ indicating\ whether\ a\ position\ on\ the\ board\ is\ filled.\r\n\ @param\ columnIndex\ The\ column\ being\ tested\ or\ the\ column\ relative\ to\ which\ we're\ testing\ the\ fill.\r\n\ @param\ x\ the\ horizontal\ distance\ to\ increment.\r\n\ @param\ y\ the\ vertical\ distance\ to\ increment.\r\n\ @param\ testRow\ the\ row\ being\ tested,\ which\ is\ passed\ 0\ for\ lowest\ and\ 1\ for\ the\ slot\ above\ it.\r\n\ @return\ a\ boolean\ indicating\ if\ the\ position\ on\ the\ board\ is\ filled.\r\n
comment16.params=columnIndex\ x\ y\ testRow
comment16.target=boolean\ checkColor(int,\ int,\ int,\ int)
comment16.text=\r\n\ Returns\ a\ boolean\ indicating\ whether\ a\ position\ on\ the\ board\ is\ red.\r\n\ @param\ columnIndex\ The\ column\ being\ tested\ or\ the\ column\ relative\ to\ which\ we're\ testing\ the\ color.\r\n\ @param\ x\ the\ horizontal\ distance\ to\ increment.\r\n\ @param\ y\ the\ vertical\ distance\ to\ increment.\r\n\ @param\ testRow\ the\ row\ being\ tested,\ which\ is\ passed\ 0\ for\ lowest\ and\ 1\ for\ the\ slot\ above\ it.\r\n\ @return\ a\ boolean\ indicating\ if\ the\ position\ on\ the\ board\ is\ red.\r\n
comment17.params=
comment17.target=java.lang.String\ getName()
comment17.text=\r\n\ Returns\ the\ name\ of\ this\ agent.\r\n\r\n\ @return\ the\ agent's\ name\r\n
comment2.params=
comment2.target=int\ bestMove()
comment2.text=\r\n\ Returns\ the\ column\ index\ in\ which\ the\ best\ available\ move\ can\ be\ made.\r\n\ @return\ returns\ the\ column\ index\ in\ which\ the\ best\ available\ move\ can\ be\ made.\r\n
comment3.params=
comment3.target=java.util.ArrayList\ wouldGiveWinningMove()
comment3.text=\r\n\ Placing\ a\ token\ in\ some\ of\ the\ columns\ could\ make\ the\ opponent\ win\ (by\ placing\ a\ token\ above\ in\ it).\r\n\ MyAgent\ will\ collect\ all\ the\ dangerous\ columns\ and\ won't\ place\ any\ token\ in\ them.\r\n\r\n\ @return\ an\ ArrayList\ of\ column\ indexes\ which\ if\ played,\ would\ give\ a\ winning\ move\ to\ the\ opponent.\r\n\ NB\ we\ can\ call\ the\ .contains()\ method\ on\ the\ ArrayList.\r\n
comment4.params=
comment4.target=int\ centerAvailable()
comment4.text=\r\n\ Determines\ if\ a\ center\ column\ is\ available\ with\ an\ open\ slot\ at\ the\ bottom.\r\n\ @return\ the\ column\ index,\ -1\ if\ not\ available.\r\n
comment5.params=columnNumber
comment5.target=void\ moveOnColumn(int)
comment5.text=\r\n\ Drops\ a\ token\ into\ a\ particular\ column\ so\ that\ it\ will\ fall\ to\ the\ bottom\ of\ the\ column.\r\n\ If\ the\ column\ is\ already\ full,\ nothing\ will\ change.\r\n\ \r\n\ @param\ columnNumber\ The\ column\ into\ which\ to\ drop\ the\ token.\r\n
comment6.params=column
comment6.target=int\ getLowestEmptyIndex(Connect4Column)
comment6.text=\r\n\ Returns\ the\ index\ of\ the\ top\ empty\ slot\ in\ a\ particular\ column\ given\ a\ Connect4Column.\r\n\ \r\n\ @param\ column\ The\ column\ to\ check.\r\n\ @return\ the\ index\ of\ the\ top\ empty\ slot\ in\ a\ particular\ column;\ -1\ if\ the\ column\ is\ already\ full.\r\n
comment7.params=columnIndex
comment7.target=int\ getLowestEmptyIndex(int)
comment7.text=\r\n\ Returns\ the\ index\ of\ the\ top\ empty\ slot\ in\ a\ particular\ column\ given\ an\ Integer.\r\n\r\n\ @param\ columnIndex\ The\ column\ to\ check.\r\n\r\n\ @return\ the\ index\ of\ the\ top\ empty\ slot\ in\ a\ particular\ column\r\n
comment8.params=
comment8.target=int\ randomMove()
comment8.text=\r\n\ Returns\ a\ random\ valid\ move.\ If\ your\ agent\ doesn't\ know\ what\ to\ do,\ making\ a\ random\ move\r\n\ can\ allow\ the\ game\ to\ go\ on\ anyway.\r\n\r\n\ @return\ return\ the\ index\ of\ the\ column\ in\ which\ a\ token\ would\ be\ placed\ into\r\n
comment9.params=
comment9.target=int\ iCanWin()
comment9.text=\r\n\ Returns\ the\ column\ that\ would\ allow\ the\ agent\ to\ win.\r\n\ \r\n\ You\ might\ want\ your\ agent\ to\ check\ to\ see\ if\ it\ has\ a\ winning\ move\ available\ to\ it\ so\ that\r\n\ it\ can\ go\ ahead\ and\ make\ that\ move.\ Implement\ this\ method\ to\ return\ what\ column\ would\r\n\ allow\ the\ agent\ to\ win.\r\n\r\n\ @return\ the\ column\ that\ would\ allow\ the\ agent\ to\ win.\r\n
numComments=18
